import golosinas.*
import mariano.*

describe "tests de mariano" {

	fixture {
		chocolatin.pesoInicial(100)
		mariano.comprar(chocolatin)
		mariano.comprar(caramelo)
		mariano.comprar(bombon)
	}

	test "test comprar" {
		assert.equals(3, mariano.golosinas().size())
		assert.that(mariano.golosinas().contains(chocolatin))
		assert.that(mariano.golosinas().contains(caramelo))
		assert.that(mariano.golosinas().contains(bombon))
		assert.notThat(mariano.golosinas().contains(chupetin))
	}
	
	test "probar golosinas" {
		/* habilitar las lineas anuladas cuando se complete la definicion 
		 * de las golosinas
		 */
	assert.equals(100, chocolatin.peso())
	assert.equals(5, caramelo.peso())
		assert.equals(15, bombon.peso())
		mariano.probarGolosinas()
	assert.equals(98, chocolatin.peso())
		assert.equals(4, caramelo.peso())
		assert.equals(11, bombon.peso())
	}
	test "desechar golosinas"{
		mariano.desechar(caramelo)
		assert.notThat(mariano.golosinas().contains(caramelo))
	}
	
	test "hayGolosinaSinTACC"{
		mariano.comprar(chupetin)
		assert.that(mariano.hayGolosinaSinTACC())
	}
	
	test "precios cuidados"{		
		mariano.comprar(chupetin)
		mariano.comprar(caramelo)
		assert.that(mariano.preciosCuidados())
	}
	
	test "golosinasFaltantes"{

		assert.equals([chupetin, alfajor], mariano.golosinasFaltantes([alfajor, bombon, chocolatin, chupetin]))
	}
	
	test "gustosFaltantes"{
		assert.equals(["melon"], mariano.gustosFaltantes(["mel√≥n", "chocolate", "frutilla" , "vainilla"]))
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}

